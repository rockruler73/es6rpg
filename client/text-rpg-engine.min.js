!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("text-rpg-engine",[],t):"object"==typeof exports?exports["text-rpg-engine"]=t():e["text-rpg-engine"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.items=t}var t,n,o;return t=e,(n=[{key:"addItems",value:function(e){return this.items=this.items.concat(e),this.items}},{key:"dropItem",value:function(e){var t=this.items.filter(function(t){return t.name!==e});return this.items=t,this.items}}])&&r(t.prototype,n),o&&r(t,o),e}();t.default=o,e.exports=t.default},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=new(((r=n(2))&&r.__esModule?r:{default:r}).default);t.default=o,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=u(n(3)),o=u(n(4)),i=u(n(5)),a=u(n(6)),s=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function d(e){return function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function a(e){f(i,r,o,a,s,"next",e)}function s(e){f(i,r,o,a,s,"throw",e)}a(void 0)})}}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var m=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],a=(arguments.length>2&&void 0!==arguments[2]&&arguments[2],arguments.length>3&&void 0!==arguments[3]?arguments[3]:""),s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.Display=new r.default,this.Input=new o.default,this.datapath=t,this.rooms=n,this.startRoom=a,this.endRoom=s,this.Player=new i.default(a=this.startRoom)}var t,n,u;return t=e,(n=[{key:"init",value:function(){var e=d(regeneratorRuntime.mark(function e(){var t,n,r,o,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.loadData(this.datapath);case 2:for(n=e.sent,r=0;r<n.length;r++)for(this.addRoom(n[r].name,n[r].getText),o=0;o<n[r].prompts.length;o++)n[r].prompts[o].name||(n[r].prompts[o].name=""),n[r].prompts[o].keywords||(n[r].prompts[o].keywords=[]),n[r].prompts[o].results||(n[r].prompts[o].results={}),n[r].prompts[o].requirements||(n[r].prompts[o].requirements=[]),this.rooms[r].addPrompt(n[r].prompts[o].name,n[r].prompts[o].keywords,n[r].prompts[o].results,n[r].prompts[o].requirements);""===this.startRoom&&this.rooms.length>0&&(this.startRoom=this.rooms[0].name,this.Player.startRoom=this.startRoom,this.Player.currentRoom=this.Player.startRoom),""===this.endRoom&&this.rooms.length>0&&(this.endRoom=this.rooms[this.rooms.length-1].name),i=0;case 7:if(!(i<this.rooms.length)){e.next=14;break}if(this.rooms[i].name!==this.startRoom){e.next=11;break}return t=this.rooms[i].getText,e.abrupt("break",14);case 11:i++,e.next=7;break;case 14:void 0===t&&(t="No starting room text found"),this.Display.show(t);case 16:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"addRoom",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],o=new a.default(e,t,r,n);return this.rooms.push(o),o}},{key:"dropRoom",value:function(e){var t=this.rooms.filter(function(t){return t.name!==e});return this.rooms=t,this.rooms}},{key:"getRoom",value:function(e){return this.rooms.find(function(t){return t.name===e})}},{key:"decidePath",value:function(e){"restart"===e&&this.resetGame();var t=this,n=t.getRoom(t.Player.currentRoom);if(void 0!==c(n.prompts)){var r=!1;n.prompts.forEach(function(n){if(!1===r){var o=n.matchKeywords(e,t.Player.inventory.items);if(null!==o){if(r=!0,"success"in o&&(t.Display.show("<p>".concat(o.success.successText,"</p>")),void 0!==o.success.itemsGiven&&t.Player.inventory.addItems(o.success.itemsGiven),void 0!==o.success.roomToEnter)){var i,a,s=l(t.Player.enterRoom(t.getRoom(o.success.roomToEnter)),2);a=s[0],i=s[1],t.Display.append("<p>".concat(a,"</p>")),i&&o.success.roomToEnter===t.endRoom&&t.win()}if("fail"in o)return t.Display.show("".concat(o.fail.failText)),void t.Display.append("<p>Missing required items: ".concat(o.fail.missing.toString(),".\n              </p><p>").concat(t.getRoom(t.Player.currentRoom).getText,"</p>"))}}!1===r&&t.Display.show('<p>No actions could be done from: "'.concat(e,"\". Try something else, or be more \n          specific about what you're doing.</p><p>").concat(t.getRoom(t.Player.currentRoom).getText,"</p>"))})}else t.Display.show("<p>There doesn't seem to be any actions at all that you can do in this room.</p>\n      ".concat(t.getRoom(t.Player.currentRoom).getText))}},{key:"userSend",value:function(e){this.Input.send(e),this.decidePath(this.Input.value)}},{key:"disableInput",value:function(){this.Input.disable()}},{key:"enableInput",value:function(){this.Input.enable()}},{key:"win",value:function(){this.Display.append("<p>YOU WIN!</p>"),this.disableInput()}},{key:"resetGame",value:function(){this.Player.inventory=new s.default,this.Player.currentRoom=this.startRoom;var e=this.getRoom(this.startRoom);this.Display.show(e.getText),this.Input.enable()}},{key:"loadData",value:function(){var e=d(regeneratorRuntime.mark(function e(t){var n,r,o,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=[],e.next=3,fetch(t);case 3:return r=e.sent,e.next=6,r.json();case 6:for(o=e.sent,i=0;i<o.rooms.length;i++)o.rooms[i].prompts||(o.rooms[i].prompts=[]),n.push(o.rooms[i]);return e.abrupt("return",n);case 9:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()}])&&h(t.prototype,n),u&&h(t,u),e}();t.default=m,e.exports=t.default},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"display";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.html=t,this.elementId=n}var t,n,o;return t=e,(n=[{key:"show",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;null===e?document.getElementById(this.elementId).innerHTML=this.html:(document.getElementById(this.elementId).innerHTML=e,this.html=e)}},{key:"append",value:function(e){document.getElementById(this.elementId).innerHtml+=e}}])&&r(t.prototype,n),o&&r(t,o),e}();t.default=o,e.exports=t.default},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"input";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.disabled=t,this.value=n,this.elementId=r}var t,n,o;return t=e,(n=[{key:"enable",value:function(){this.disabled=!1,document.getElementById("input").disabled=!1}},{key:"disable",value:function(){this.disabled=!0,document.getElementById("input").disabled=!0}},{key:"send",value:function(e){e=e.toLowerCase(),this.value=e}}])&&r(t.prototype,n),o&&r(t,o),e}();t.default=o,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(0))&&r.__esModule?r:{default:r};function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new o.default,r=(arguments.length>2&&void 0!==arguments[2]&&arguments[2],arguments[3]);!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,""===this.name&&(this.name="player"),this.inventory=n,""===this.currentRoom&&(this.currentRoom=this.startRoom),this.startRoom=r}var t,n,r;return t=e,(n=[{key:"enterRoom",value:function(e){var t=e.enter(this.inventory.items);return!1===t[1]||(this.currentRoom=e.name),[t[0],t[1]]}},{key:"getItem",value:function(e){return this.inventory.addItem(e),this.inventory}},{key:"dropItem",value:function(e){return this.inventory.dropItem(e),this.inventory}}])&&i(t.prototype,n),r&&i(t,r),e}();t.default=a,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(7))&&r.__esModule?r:{default:r};function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.getText=n,this.requirements=r,this.prompts=o}var t,n,r;return t=e,(n=[{key:"addPrompt",value:function(e,t,n,r){var i=new o.default(e,t,n,r);return this.prompts.push(i),this.prompts}},{key:"enter",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t="",n=!0;return this.requirements>0?0===e.length?(n=!1,this.requirements.forEach(function(e){t+="".concat(e.failText,". ")})):(this.requirements.forEach(function(e){var r=!1;this.items.forEach(function(t){t===e&&(r=!0)}),!1===r&&(n=!1,t+=e.failText)}),!0===n&&(t=this.getText)):t=this.getText,[t,n]}}])&&i(t.prototype,n),r&&i(t,r),e}();t.default=a,e.exports=t.default},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.keywords=n.map(function(e){return e.toLowerCase()}),this.results=r,this.requirements=o}var t,n,o;return t=e,(n=[{key:"matchKeywords",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=!1,r=[];return this.requirements.length>0&&this.requirements.forEach(function(e){var n=!1;t.forEach(function(t){t===e&&(n=!0)}),n||r.push(e)}),this.keywords.forEach(function(t){e.includes(t.toLowerCase())&&(n=!0)}),n?r.length>0?{fail:{missing:r,failText:this.results.failText}}:{success:this.results}:null}}])&&r(t.prototype,n),o&&r(t,o),e}();t.default=o,e.exports=t.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,